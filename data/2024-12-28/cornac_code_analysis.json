[
    {
        "number": 2,
        "created_at": "2024-05-19T15:41:18Z",
        "updated_at": "2024-05-19T15:41:20Z",
        "url": "https://api.github.com/repos/username/cornac/code-scanning/alerts/2",
        "html_url": "https://github.com/username/cornac/security/code-scanning/2",
        "state": "open",
        "fixed_at": null,
        "dismissed_by": null,
        "dismissed_at": null,
        "dismissed_reason": null,
        "dismissed_comment": null,
        "rule": {
            "id": "py/code-injection",
            "severity": "error",
            "description": "Code injection",
            "name": "py/code-injection",
            "tags": [
                "external/cwe/cwe-094",
                "external/cwe/cwe-095",
                "external/cwe/cwe-116",
                "security"
            ],
            "full_description": "Interpreting unsanitized user input as code allows a malicious user to perform arbitrary code execution.",
            "help": "# Code injection\nDirectly evaluating user input (for example, an HTTP request parameter) as code without properly sanitizing the input first allows an attacker arbitrary code execution. This can occur when user input is passed to code that interprets it as an expression to be evaluated, such as `eval` or `exec`.\n\n\n## Recommendation\nAvoid including user input in any expression that may be dynamically evaluated. If user input must be included, use context-specific escaping before including it. It is important that the correct escaping is used for the type of evaluation that will occur.\n\n\n## Example\nThe following example shows two functions setting a name from a request. The first function uses `exec` to execute the `setname` function. This is dangerous as it can allow a malicious user to execute arbitrary code on the server. For example, the user could supply the value `\"' + subprocess.call('rm -rf') + '\"` to destroy the server's file system. The second function calls the `setname` function directly and is thus safe.\n\n\n```python\n\nurlpatterns = [\n    # Route to code_execution\n    url(r'^code-ex1$', code_execution_bad, name='code-execution-bad'),\n    url(r'^code-ex2$', code_execution_good, name='code-execution-good')\n]\n\ndef code_execution(request):\n    if request.method == 'POST':\n        first_name = base64.decodestring(request.POST.get('first_name', ''))\n        #BAD -- Allow user to define code to be run.\n        exec(\"setname('%s')\" % first_name)\n\ndef code_execution(request):\n    if request.method == 'POST':\n        first_name = base64.decodestring(request.POST.get('first_name', ''))\n        #GOOD --Call code directly\n        setname(first_name)\n\n```\n\n## References\n* OWASP: [Code Injection](https://www.owasp.org/index.php/Code_Injection).\n* Wikipedia: [Code Injection](https://en.wikipedia.org/wiki/Code_injection).\n* Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n* Common Weakness Enumeration: [CWE-95](https://cwe.mitre.org/data/definitions/95.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
            "security_severity_level": "critical"
        },
        "tool": {
            "name": "CodeQL",
            "guid": null,
            "version": "2.18.0"
        },
        "most_recent_instance": {
            "ref": "refs/heads/master",
            "analysis_key": ".github/workflows/codeql.yml:analyze",
            "environment": "{\"build-mode\":\"none\",\"language\":\"python\"}",
            "category": "/language:python",
            "state": "open",
            "commit_sha": "621404c4199db9142823cd083c715b7814e535f3",
            "message": {
                "text": "This code execution depends on a user-provided value."
            },
            "location": {
                "path": "cornac/serving/app.py",
                "start_line": 46,
                "end_line": 46,
                "start_column": 17,
                "end_column": 21
            },
            "classifications": []
        },
        "instances_url": "https://api.github.com/repos/username/cornac/code-scanning/alerts/2/instances"
    },
    {
        "number": 1,
        "created_at": "2024-05-19T15:41:18Z",
        "updated_at": "2024-05-19T15:41:20Z",
        "url": "https://api.github.com/repos/username/cornac/code-scanning/alerts/1",
        "html_url": "https://github.com/username/cornac/security/code-scanning/1",
        "state": "open",
        "fixed_at": null,
        "dismissed_by": null,
        "dismissed_at": null,
        "dismissed_reason": null,
        "dismissed_comment": null,
        "rule": {
            "id": "py/reflective-xss",
            "severity": "error",
            "description": "Reflected server-side cross-site scripting",
            "name": "py/reflective-xss",
            "tags": [
                "external/cwe/cwe-079",
                "external/cwe/cwe-116",
                "security"
            ],
            "full_description": "Writing user input directly to a web page allows for a cross-site scripting vulnerability.",
            "help": "# Reflected server-side cross-site scripting\nDirectly writing user input (for example, an HTTP request parameter) to a webpage without properly sanitizing the input first, allows for a cross-site scripting vulnerability.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider escaping the input before writing user input to the page. The standard library provides escaping functions: `html.escape()` for Python 3.2 upwards or `cgi.escape()` older versions of Python. Most frameworks also provide their own escaping functions, for example `flask.escape()`.\n\n\n## Example\nThe following example is a minimal flask app which shows a safe and unsafe way to render the given name back to the page. The first view is unsafe as `first_name` is not escaped, leaving the page vulnerable to cross-site scripting attacks. The second view is safe as `first_name` is escaped, so it is not vulnerable to cross-site scripting attacks.\n\n\n```python\nfrom flask import Flask, request, make_response, escape\n\napp = Flask(__name__)\n\n@app.route('/unsafe')\ndef unsafe():\n    first_name = request.args.get('name', '')\n    return make_response(\"Your name is \" + first_name)\n\n@app.route('/safe')\ndef safe():\n    first_name = request.args.get('name', '')\n    return make_response(\"Your name is \" + escape(first_name))\n\n```\n\n## References\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Python Library Reference: [html.escape()](https://docs.python.org/3/library/html.html#html.escape).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
            "security_severity_level": "medium"
        },
        "tool": {
            "name": "CodeQL",
            "guid": null,
            "version": "2.18.0"
        },
        "most_recent_instance": {
            "ref": "refs/heads/master",
            "analysis_key": ".github/workflows/codeql.yml:analyze",
            "environment": "{\"build-mode\":\"none\",\"language\":\"python\"}",
            "category": "/language:python",
            "state": "open",
            "commit_sha": "621404c4199db9142823cd083c715b7814e535f3",
            "message": {
                "text": "Cross-site scripting vulnerability due to a user-provided value."
            },
            "location": {
                "path": "cornac/serving/app.py",
                "start_line": 227,
                "end_line": 227,
                "start_column": 12,
                "end_column": 65
            },
            "classifications": []
        },
        "instances_url": "https://api.github.com/repos/username/cornac/code-scanning/alerts/1/instances"
    }
]